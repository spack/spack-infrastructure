[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "spack-secrets"
description = ''
readme = "README.md"
requires-python = ">=3.10"
version = "0.0.1"
license = "MIT"
keywords = []
authors = [
  { name = "Jacob Nesbitt", email = "jjnesbitt2@gmail.com" },
]
classifiers = [
  "Development Status :: 4 - Beta",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: Implementation :: CPython",
  "Programming Language :: Python :: Implementation :: PyPy",
]
dependencies = [
  "click~=8.1",
  "kubernetes~=28.1.0",
  "ruamel.yaml~=0.18",
]
[project.scripts]
spack-secrets = "spack_secrets.cli:cli"

[tool.hatch.build]
packages = ["src/spack_secrets"]

# Default env
[tool.hatch.envs.default]
dependencies = [
  "pytest",
  "ruff",
]

# Linting
[tool.hatch.envs.lint]
dependencies = [
  "ruff",
]
[tool.hatch.envs.lint.scripts]
lint = "ruff check {args:.}"

# Testing
[tool.hatch.envs.test]
dependencies = [
  "pytest",
  "coverage[toml]>=6.5",
]
[tool.hatch.envs.test.scripts]
test = "pytest {args:tests}"
test-cov = "coverage run -m pytest {args:tests}"
cov-report = [
  "- coverage combine",
  "coverage report",
]
cov = [
  "test-cov",
  "cov-report",
]
[[tool.hatch.envs.test.matrix]]
python = ["3.10", "3.11", "3.12"]

# Type checking
[tool.hatch.envs.types]
dependencies = [
  "mypy>=1.0.0",
]
[tool.hatch.envs.types.scripts]
check = "mypy --install-types --non-interactive {args:spack_secrets tests}"

[tool.coverage.run]
source_pkgs = ["spack_secrets", "tests"]
branch = true
parallel = true

[tool.coverage.paths]
secrets = ["spack_secrets", "*/secrets/spack_secrets"]
tests = ["tests", "*/secrets/tests"]

[tool.coverage.report]
exclude_lines = [
  "no cov",
  "if __name__ == .__main__.:",
  "if TYPE_CHECKING:",
]

[tool.pytest.ini_options]
addopts = "--strict-markers --showlocals --verbose"

[tool.ruff]
line-length = 100
indent-width = 4
target-version = "py310"
select = ["ALL"]
ignore = [
  # Incompatible with formatter
  # https://docs.astral.sh/ruff/formatter/#conflicting-lint-rules
  "COM812", # missing-trailing-comma
  "COM819", # prohibited-trailing-comma
  "D203", # one-blank-line-before-class
  "D206", # indent-with-spaces
  "D212", # multi-line-summary-first-line
  "D300", # triple-single-quotes
  "E111", # indentation-with-invalid-multiple
  "E114", # indentation-with-invalid-multiple-comment
  "E117", # over-indented
  "ISC001", # single-line-implicit-string-concatenation
  "ISC002", # multi-line-implicit-string-concatenation
  "Q", # flake8-quotes
  "W191", # tab-indentation

  "A003", # Class attribute is shadowing a Python builtin
  "ANN", # flake8-annotations
  "ARG001", # Unused function argument
  "ARG002", # Unused method argument
  "D100", # Missing docstring in public module
  "D101", # Missing docstring in public class
  "D102", # Missing docstring in public method
  "D103", # Missing docstring in public function
  "D104", # Missing docstring in public package
  "D105", # Missing docstring in magic method
  "D106", # Missing docstring in public nested class
  "D107", # Missing docstring in __init__
  "EM101", # Exception must not use a string literal, assign to variable first
  "EM102", # Exception must not use an f-string literal, assign to variable first
  "ERA001", # Found commented-out code
  "FIX", # flake8-fixme
  "TD002", # Missing author in TODO
  "TD003", # Missing issue link on the line following this TODO
  "TRY003", # Avoid specifying long messages outside the exception class
  "PTH123", # Prefer pathlib.open to open builtin

  # Try to fix upstream
  "RUF012", #  Mutable class attributes should be annotated with `typing.ClassVar`
]

# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]

[tool.ruff.per-file-ignores]
"**/tests/**" = [
  "DJ007", # Do not use `__all__`
  "DJ008", # Model does not define `__str__` method
  "PLR0913", # Too many arguments to function call
  "PLR2004", # Magic value used in comparison
  "S101", # Use of assert detected
  "S105", # Possible hardcoded password
  "SLF001", # Private member accessed
  "T201", # Disallow print
]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"
