---
apiVersion: helm.fluxcd.io/v1
kind: HelmRelease
metadata:
  name: kube-prometheus-stack
  namespace: monitoring
spec:
  releaseName: kube-prometheus-stack
  chart:
    name: kube-prometheus-stack
    repository: https://prometheus-community.github.io/helm-charts
    version: 32.0.2
  values:
    defaultRules:
#  Appears to be broken in production -  Does not validate.
#  See: https://github.com/prometheus-community/helm-charts/issues/1718
#      disabled:
#        # Both of these services are handled by EKS
#        KubeSchedulerDown: true
#        KubeControllerManagerDown: true
      additionalRuleLabels:
        namespace: monitoring
        source_namespace: '{{ $labels.namespace }}'

    namespaceOverride: monitoring
    alertmanager:
      ingress:
        enabled: false
      alertmanagerSpec:
        externalUrl: "https://alertmanager.spack.io"
        alertmanagerConfigSelector:
          matchLabels:
            alertmanagerConfig: spack

    grafana:
      ingress:
        enabled: false
      admin:
        existingSecret: "kube-prometheus-stack-grafana" # See: secrets.yaml
        userKey: admin-user
        passwordKey: admin-password
      grafana.ini:
        paths:
          data: /var/lib/grafana/
          logs: /var/log/grafana
          plugins: /var/lib/grafana/plugins
          provisioning: /etc/grafana/provisioning
        analytics:
          check_for_updates: true
        log:
          mode: console
        grafana_net:
          url: https://grafana.net
        server:
          root_url: https://grafana.spack.io
        auth.github:
          enabled: true
          allow_sign_up: true
          scopes: user:email,read:org
          auth_url: https://github.com/login/oauth/authorize
          token_url: https://github.com/login/oauth/access_token
          api_url: https://api.github.com/user
#          team_ids:
          allowed_organizations: spack
          client_id: DEADBEEF # Will be overriden by environment vars
          client_secret: DEADBEEF # Will be overriden by environment vars

      envValueFrom:
        GF_AUTH_GITHUB_CLIENT_ID:
          secretKeyRef:
            name: grafana-github-oauth-client
            key: client-id
        GF_AUTH_GITHUB_CLIENT_SECRET:
          secretKeyRef:
            name: grafana-github-oauth-client
            key: client-secret


    prometheus:
      ingress:
        enabled: false
      prometheusSpec:
        externalUrl: "https://prometheus.spack.io"
        storageSpec:
          volumeClaimTemplate:
            spec:
              storageClassName: gp2
              accessModes: ["ReadWriteOnce"]
              resources:
                requests:
                  storage: 200Gi
        podMonitorSelectorNilUsesHelmValues: false
        serviceMonitorSelectorNilUsesHelmValues: false
        nodeSelector:
          spack.io/node-pool: beefy

    kube-state-metrics:
      metricLabelsAllowlist:
        - pods=[metrics/gitlab_ci_commit_ref_name,metrics/gitlab_ci_job_stage,metrics/gitlab_ci_pipeline_id,metrics/gitlab_ci_project_name,metrics/gitlab_ci_project_namespace,metrics/spack_ci_stack_name,metrics/spack_job_spec_pkg_name,metrics/spack_spec_needs_rebuild]
        - nodes=[beta.kubernetes.io/instance-type,spack.io/instance-cost,spack.io/node-pool, spack.io/pipeline]
# NOTE:
#
# Currently it is not possible to pass kube-state-metrics partial wild card
# matches for whitelisted labels (i.e. metrics/* will not work). The other
# option - to grab all labels with the generic wild card (i.e. *) and use
# prometheus metric_relabel_configs to handle filtering. This _should_ be
# possible using something like the configuration below, however it turns out it
# is not CURRENTLY possible (2022-02-23) because labelmap validation of
# ServiceMonitor CRD's is incorrect in the prometheus-operator (v.54.0). There
# is a merged PR in prometheus-operator:release-0.54 but a new patch release
# (i.e. v0.54.1) has not been cut yet. Once it is (and that propigates into the
# helm chart - or we forcibly set the image to
# quay.io/prometheus-operator/prometheus-operator:v0.54.1) Then we should be
# able to "correctly" handle this labeling issue.
#
# See: https://github.com/prometheus-operator/prometheus-operator/pull/4574
#
#        - pods=[*]
#
#      prometheus:
#        monitor:
#          metricRelabelings:
#            # create new labels like the following:
#            # lable_metrics_gitlab_ci_commit_ref_name=test-ci -> gitlab_ci_commit_ref_name=test-ci
#            # Note that the original label_metrics_* labels will still exist
#            - action: labelmap
#              regex: "label_metrics_(.+)"
#            - action: labeldrop
#              regex: "label_*"
